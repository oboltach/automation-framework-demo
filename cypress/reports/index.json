{
  "stats": {
    "suites": 2,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2025-09-15T17:57:22.647Z",
    "end": "2025-09-15T17:57:25.395Z",
    "duration": 2748
  },
  "results": [
    {
      "uuid": "896fe2e3-9ee6-4899-a83e-9b87205d51b8",
      "title": "",
      "fullFile": "cypress/e2e/api/users.cy.js",
      "file": "cypress/e2e/api/users.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b6bc9c6b-52c8-401f-86ac-f0e5e1b0bd2f",
          "title": "Users API",
          "fullFile": "cypress/e2e/api/users.cy.js",
          "file": "cypress/e2e/api/users.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b100a1c7-ee2f-4c0e-8efd-80ac8faaa0b5",
              "title": "CRUD",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create → 201 with valid payload",
                  "fullTitle": "Users API CRUD Create → 201 with valid payload",
                  "timedOut": null,
                  "duration": 71,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubCreateUser({\n  id: 'u-1'\n}, 201);\nconst payload = (0, _dataFactory.makeUser)({\n  accountType: 'basic'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/users', payload).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectUserShape)(body);\n});\ncy.wait('@createUser').its('request.body').should('deep.include', payload);",
                  "err": {},
                  "uuid": "419274f1-f74f-44cb-b1ab-d4bd48aeb23f",
                  "parentUUID": "b100a1c7-ee2f-4c0e-8efd-80ac8faaa0b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Read → 200 for existing user",
                  "fullTitle": "Users API CRUD Read → 200 for existing user",
                  "timedOut": null,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = 'u-1';\ncy.stubGetUser(id, {\n  name: 'John Doe',\n  email: 'john@example.com',\n  accountType: 'premium'\n}, 200);\n(0, _apiFetch.apiFetch)('GET', `/api/users/${id}`).then(res => {\n  (0, _assertions.expectHttpStatus)(res, 200);\n  (0, _assertions.expectUserShape)(res.body);\n  expect(res.body.id).to.eq(id);\n});\ncy.wait(`@getUser-${id}`);",
                  "err": {},
                  "uuid": "5ca15850-dd1e-43f1-83a1-67b0f8cf0fca",
                  "parentUUID": "b100a1c7-ee2f-4c0e-8efd-80ac8faaa0b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update existing user → 200",
                  "fullTitle": "Users API CRUD Update existing user → 200",
                  "timedOut": null,
                  "duration": 36,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = 'u-1';\nconst update = {\n  name: 'John Updated'\n};\n// Inline intercept for PATCH (not in commands since endpoint not provided)\ncy.intercept('PATCH', `/api/users/${id}`, {\n  statusCode: 200,\n  body: {\n    id,\n    name: update.name,\n    email: 'john@example.com',\n    accountType: 'premium'\n  }\n}).as('updateUser');\n(0, _apiFetch.apiFetch)('PATCH', `/api/users/${id}`, update).then(res => {\n  (0, _assertions.expectHttpStatus)(res, 200);\n  (0, _assertions.expectUserShape)(res.body);\n  expect(res.body.name).to.eq('John Updated');\n});\ncy.wait('@updateUser').its('request.body').should('deep.include', update);",
                  "err": {},
                  "uuid": "c1004c53-6333-4211-a266-8d94209cb5dd",
                  "parentUUID": "b100a1c7-ee2f-4c0e-8efd-80ac8faaa0b5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete → 204 (stubbed endpoint)",
                  "fullTitle": "Users API CRUD Delete → 204 (stubbed endpoint)",
                  "timedOut": null,
                  "duration": 23,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const id = 'u-1';\ncy.intercept('DELETE', `**/api/users/${id}`, {\n  statusCode: 204\n}).as('deleteUser');\n(0, _apiFetch.apiFetch)('DELETE', `/api/users/${id}`, null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(204);\n});\ncy.wait('@deleteUser');",
                  "err": {},
                  "uuid": "b0132b12-023a-46d4-834e-d20818aff20e",
                  "parentUUID": "b100a1c7-ee2f-4c0e-8efd-80ac8faaa0b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "419274f1-f74f-44cb-b1ab-d4bd48aeb23f",
                "5ca15850-dd1e-43f1-83a1-67b0f8cf0fca",
                "c1004c53-6333-4211-a266-8d94209cb5dd",
                "b0132b12-023a-46d4-834e-d20818aff20e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 164,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ea19a08b-6ffb-4a7e-9506-e1ad72bd4019",
              "title": "Errors",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "400 on invalid email format",
                  "fullTitle": "Users API Errors 400 on invalid email format",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubError('POST', '/api/users', 400, {\n  error: 'Invalid email'\n});\nconst bad = (0, _dataFactory.makeUser)({\n  email: 'not-an-email'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/users', bad).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(400);\n  expect(body).to.have.property('error', 'Invalid email');\n});",
                  "err": {},
                  "uuid": "03ecd97b-8d9a-4e9d-8945-4b641587346c",
                  "parentUUID": "ea19a08b-6ffb-4a7e-9506-e1ad72bd4019",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "404 on missing user",
                  "fullTitle": "Users API Errors 404 on missing user",
                  "timedOut": null,
                  "duration": 18,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubError('GET', '**/api/users/not-found', 404, {\n  error: 'User not found'\n});\n(0, _apiFetch.apiFetch)('GET', '/api/users/not-found', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(404);\n});",
                  "err": {},
                  "uuid": "28078dc1-bc44-4066-b6f8-22430f717316",
                  "parentUUID": "ea19a08b-6ffb-4a7e-9506-e1ad72bd4019",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "409 on duplicate email",
                  "fullTitle": "Users API Errors 409 on duplicate email",
                  "timedOut": null,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubError('POST', '/api/users', 409, {\n  error: 'Duplicate email'\n});\nconst dup = (0, _dataFactory.makeUser)({\n  email: 'dup@example.com'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/users', dup, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(409);\n});",
                  "err": {},
                  "uuid": "da5b0b25-e32f-477a-a68b-4d59d6b935a8",
                  "parentUUID": "ea19a08b-6ffb-4a7e-9506-e1ad72bd4019",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "500 on server error (read)",
                  "fullTitle": "Users API Errors 500 on server error (read)",
                  "timedOut": null,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubError('GET', '/api/users/u-err', 500, {\n  error: 'Internal error'\n});\n(0, _apiFetch.apiFetch)('GET', '/api/users/u-err', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(500);\n});",
                  "err": {},
                  "uuid": "f5633dbc-427f-4d28-8b2c-551668a8ca55",
                  "parentUUID": "ea19a08b-6ffb-4a7e-9506-e1ad72bd4019",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03ecd97b-8d9a-4e9d-8945-4b641587346c",
                "28078dc1-bc44-4066-b6f8-22430f717316",
                "da5b0b25-e32f-477a-a68b-4d59d6b935a8",
                "f5633dbc-427f-4d28-8b2c-551668a8ca55"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e8f4504f-b8a4-4ff6-99ee-9b10e6ccb4ef",
              "title": "Data validation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "response contains correct shape and echoes name/email from request",
                  "fullTitle": "Users API Data validation response contains correct shape and echoes name/email from request",
                  "timedOut": null,
                  "duration": 31,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = (0, _dataFactory.makeUser)({\n  name: 'Echo Me',\n  email: 'echo@example.com',\n  accountType: 'premium'\n});\n// Build a response that mirrors the inbound payload\ncy.stubCreateUser(_objectSpread({\n  id: 'u-echo'\n}, payload), 201);\n(0, _apiFetch.apiFetch)('POST', '/api/users', payload, {\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectUserShape)(body);\n  expect(body.name).to.eq(payload.name);\n  expect(body.email).to.eq(payload.email);\n  expect(body.accountType).to.eq(payload.accountType);\n});",
                  "err": {},
                  "uuid": "85f0e989-b9f6-45e7-84ce-5d5e1e00a2b2",
                  "parentUUID": "e8f4504f-b8a4-4ff6-99ee-9b10e6ccb4ef",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "85f0e989-b9f6-45e7-84ce-5d5e1e00a2b2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d3ef9e2d-1d76-4135-87fa-d06918eeafaf",
              "title": "Auth",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "401 Unauthorized when token is missing",
                  "fullTitle": "Users API Auth 401 Unauthorized when token is missing",
                  "timedOut": null,
                  "duration": 25,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '/api/users', {\n  statusCode: 401,\n  body: {\n    error: 'Unauthorized'\n  }\n}).as('createUserAuth');\nconst payload = (0, _dataFactory.makeUser)();\n(0, _apiFetch.apiFetch)('POST', '/api/users', payload, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(401);\n});\ncy.wait('@createUserAuth');",
                  "err": {},
                  "uuid": "c4152b4d-aae7-44bf-be5c-d342d88234c6",
                  "parentUUID": "d3ef9e2d-1d76-4135-87fa-d06918eeafaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "403 Forbidden for insufficient role",
                  "fullTitle": "Users API Auth 403 Forbidden for insufficient role",
                  "timedOut": null,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('GET', '/api/users/*', {\n  statusCode: 403,\n  body: {\n    error: 'Forbidden'\n  }\n}).as('getUserAuthZ');\n(0, _apiFetch.apiFetch)('GET', '/api/users/u-1', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(403);\n});\ncy.wait('@getUserAuthZ');",
                  "err": {},
                  "uuid": "ffab7c53-cee2-4178-8120-a78b12e965e0",
                  "parentUUID": "d3ef9e2d-1d76-4135-87fa-d06918eeafaf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "201 Created when Bearer token is present",
                  "fullTitle": "Users API Auth 201 Created when Bearer token is present",
                  "timedOut": null,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '**/api/users', {\n  statusCode: 201,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    id: 'u-auth',\n    name: 'John',\n    email: 'john@example.com',\n    accountType: 'premium'\n  }\n}).as('createUserWithToken');\nconst payload = (0, _dataFactory.makeUser)({\n  accountType: 'business'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/users', payload, {\n  headers: {\n    Authorization: 'Bearer test-token'\n  },\n  // ← this now gets forwarded\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectUserShape)(body);\n});\ncy.wait('@createUserWithToken').then(({\n  request\n}) => {\n  // headers are lowercase\n  expect(request.headers).to.have.property('authorization');\n  expect(request.headers.authorization).to.match(/^Bearer\\s+/);\n  expect(request.body).to.deep.include(payload);\n});",
                  "err": {},
                  "uuid": "31e1ace6-4d49-4b38-ad52-15d2150fcd91",
                  "parentUUID": "d3ef9e2d-1d76-4135-87fa-d06918eeafaf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c4152b4d-aae7-44bf-be5c-d342d88234c6",
                "ffab7c53-cee2-4178-8120-a78b12e965e0",
                "31e1ace6-4d49-4b38-ad52-15d2150fcd91"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 83,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "b275c0cb-efd4-42a5-b2d1-7fe906446223",
      "title": "",
      "fullFile": "cypress/e2e/api/transactions.cy.js",
      "file": "cypress/e2e/api/transactions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b141ff4-f4a2-406a-a204-1d3e837b2482",
          "title": "Transactions API",
          "fullFile": "cypress/e2e/api/transactions.cy.js",
          "file": "cypress/e2e/api/transactions.cy.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3cf60bc1-0534-4ba6-8e59-061f65fae766",
              "title": "CRUD",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Create → 201 with valid payload",
                  "fullTitle": "Transactions API CRUD Create → 201 with valid payload",
                  "timedOut": null,
                  "duration": 105,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.stubCreateTransaction({\n  id: 'tx-1',\n  status: 'SETTLED'\n}, 201); // stubs **/api/transactions\nconst payload = (0, _dataFactory.makeTransaction)({\n  userId: 'u-1',\n  amount: 250.75,\n  type: 'transfer'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', payload, {\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectTransactionShape)(body);\n  expect(body.status).to.eq('SETTLED');\n});\ncy.wait('@createTransaction').its('request.body').should('deep.include', payload);",
                  "err": {},
                  "uuid": "699c2453-bc7a-4c2a-92f0-d7bada4b22f6",
                  "parentUUID": "3cf60bc1-0534-4ba6-8e59-061f65fae766",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Read → 200 list for a user",
                  "fullTitle": "Transactions API CRUD Read → 200 list for a user",
                  "timedOut": null,
                  "duration": 40,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userId = 'u-1';\ncy.stubGetTransactions(userId, 200); // stubs **/api/transactions/:userId\n(0, _apiFetch.apiFetch)('GET', `/api/transactions/${userId}`, null, {\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(200);\n  (0, _assertions.expectArrayOfTransactions)(body, 1);\n});\ncy.wait(`@getTransactions-${userId}`);",
                  "err": {},
                  "uuid": "593d8d51-98ab-41b1-8340-2291b2fdebdd",
                  "parentUUID": "3cf60bc1-0534-4ba6-8e59-061f65fae766",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Update amount for transaction → 200",
                  "fullTitle": "Transactions API CRUD Update amount for transaction → 200",
                  "timedOut": null,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txId = 'tx-1';\nconst update = {\n  amount: 300\n};\ncy.intercept('PATCH', `**/api/transactions/${txId}`, {\n  statusCode: 200,\n  body: {\n    id: txId,\n    userId: 'u-1',\n    amount: 300,\n    // reflect the updated amount\n    type: 'transfer',\n    recipientId: '456',\n    status: 'SETTLED'\n  }\n}).as('updateTx');\n(0, _apiFetch.apiFetch)('PATCH', `/api/transactions/${txId}`, update, {\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(200);\n  (0, _assertions.expectTransactionShape)(body);\n  expect(body.amount).to.eq(300);\n});\ncy.wait('@updateTx').its('request.body').should('deep.include', update);",
                  "err": {},
                  "uuid": "9edb6880-5985-4c47-a887-9b638af62063",
                  "parentUUID": "3cf60bc1-0534-4ba6-8e59-061f65fae766",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Delete transaction → 204",
                  "fullTitle": "Transactions API CRUD Delete transaction → 204",
                  "timedOut": null,
                  "duration": 29,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const txId = 'tx-1';\ncy.intercept('DELETE', `**/api/transactions/${txId}`, {\n  statusCode: 204\n}).as('deleteTx');\n(0, _apiFetch.apiFetch)('DELETE', `/api/transactions/${txId}`, null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(204);\n});\ncy.wait('@deleteTx');",
                  "err": {},
                  "uuid": "18ff9ddf-2028-4215-9a6c-0f0706730ed1",
                  "parentUUID": "3cf60bc1-0534-4ba6-8e59-061f65fae766",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "699c2453-bc7a-4c2a-92f0-d7bada4b22f6",
                "593d8d51-98ab-41b1-8340-2291b2fdebdd",
                "9edb6880-5985-4c47-a887-9b638af62063",
                "18ff9ddf-2028-4215-9a6c-0f0706730ed1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 207,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0a624e81-7c70-4220-87b4-83a3fd94ecd6",
              "title": "Errors",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "400 on invalid amount (negative)",
                  "fullTitle": "Transactions API Errors 400 on invalid amount (negative)",
                  "timedOut": null,
                  "duration": 28,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '**/api/transactions', {\n  statusCode: 400,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'Invalid amount'\n  }\n}).as('createTx400');\nconst bad = (0, _dataFactory.makeTransaction)({\n  amount: -1\n});\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', bad, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(400);\n});\ncy.wait('@createTx400').its('request.body').should('deep.include', bad);",
                  "err": {},
                  "uuid": "ac9dd14e-7ded-433d-8a6c-6090318db45d",
                  "parentUUID": "0a624e81-7c70-4220-87b4-83a3fd94ecd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "400 on invalid type",
                  "fullTitle": "Transactions API Errors 400 on invalid type",
                  "timedOut": null,
                  "duration": 44,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '**/api/transactions', {\n  statusCode: 400,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'Invalid type'\n  }\n}).as('createTxType400');\nconst bad = (0, _dataFactory.makeTransaction)({\n  type: 'wire'\n}); // not in allowed set\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', bad, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(400);\n});\ncy.wait('@createTxType400').its('request.body').should('deep.include', bad);",
                  "err": {},
                  "uuid": "fd8c6366-9017-45cd-a76a-4adb0201509d",
                  "parentUUID": "0a624e81-7c70-4220-87b4-83a3fd94ecd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "404 on transactions for unknown user",
                  "fullTitle": "Transactions API Errors 404 on transactions for unknown user",
                  "timedOut": null,
                  "duration": 21,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('GET', '**/api/transactions/unknown-user', {\n  statusCode: 404,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'User not found'\n  }\n}).as('listUnknown404');\n(0, _apiFetch.apiFetch)('GET', '/api/transactions/unknown-user', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(404);\n});\ncy.wait('@listUnknown404');",
                  "err": {},
                  "uuid": "35046f1b-ffe8-4866-b746-1ab51c70bc7e",
                  "parentUUID": "0a624e81-7c70-4220-87b4-83a3fd94ecd6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "500 on server error (read)",
                  "fullTitle": "Transactions API Errors 500 on server error (read)",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('GET', '**/api/transactions/u-err', {\n  statusCode: 500,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'Internal error'\n  }\n}).as('listErr500');\n(0, _apiFetch.apiFetch)('GET', '/api/transactions/u-err', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(500);\n});\ncy.wait('@listErr500');",
                  "err": {},
                  "uuid": "c9761191-6b7b-43e2-9f7e-1816e2edfd87",
                  "parentUUID": "0a624e81-7c70-4220-87b4-83a3fd94ecd6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ac9dd14e-7ded-433d-8a6c-6090318db45d",
                "fd8c6366-9017-45cd-a76a-4adb0201509d",
                "35046f1b-ffe8-4866-b746-1ab51c70bc7e",
                "c9761191-6b7b-43e2-9f7e-1816e2edfd87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 115,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "531f1cb6-e783-4ed8-8b3f-7669bf58be09",
              "title": "Data validation",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "response shape and echoes key fields from request",
                  "fullTitle": "Transactions API Data validation response shape and echoes key fields from request",
                  "timedOut": null,
                  "duration": 40,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const payload = (0, _dataFactory.makeTransaction)({\n  userId: 'u-echo',\n  amount: 99.99,\n  type: 'deposit'\n});\n// Response mirrors payload and adds id/status\ncy.stubCreateTransaction(_objectSpread(_objectSpread({\n  id: 'tx-echo'\n}, payload), {}, {\n  status: 'PENDING'\n}), 201);\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', payload, {\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectTransactionShape)(body);\n  expect(body.userId).to.eq(payload.userId);\n  expect(body.amount).to.eq(payload.amount);\n  expect(body.type).to.eq(payload.type);\n});\ncy.wait('@createTransaction').its('request.body').should('deep.include', payload);",
                  "err": {},
                  "uuid": "6bc57138-eaf3-498e-880f-8ae3d2ddacea",
                  "parentUUID": "531f1cb6-e783-4ed8-8b3f-7669bf58be09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bc57138-eaf3-498e-880f-8ae3d2ddacea"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 40,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b3bea4ae-0c6b-4195-bb62-a66493486f79",
              "title": "Auth",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "401 Unauthorized when creating a transaction",
                  "fullTitle": "Transactions API Auth 401 Unauthorized when creating a transaction",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '**/api/transactions', {\n  statusCode: 401,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'Unauthorized'\n  }\n}).as('createTx401');\nconst payload = (0, _dataFactory.makeTransaction)();\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', payload, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(401);\n});\ncy.wait('@createTx401');",
                  "err": {},
                  "uuid": "f718e892-6123-4a83-b39b-aeb1a56d101c",
                  "parentUUID": "b3bea4ae-0c6b-4195-bb62-a66493486f79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "403 Forbidden when reading transactions list",
                  "fullTitle": "Transactions API Auth 403 Forbidden when reading transactions list",
                  "timedOut": null,
                  "duration": 22,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('GET', '**/api/transactions/*', {\n  statusCode: 403,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    error: 'Forbidden'\n  }\n}).as('listTx403');\n(0, _apiFetch.apiFetch)('GET', '/api/transactions/u-1', null, {\n  expectJson: false\n}).then(({\n  status\n}) => {\n  expect(status).to.eq(403);\n});\ncy.wait('@listTx403');",
                  "err": {},
                  "uuid": "661e7fb9-cd0a-473a-a594-7df8fd940e0f",
                  "parentUUID": "b3bea4ae-0c6b-4195-bb62-a66493486f79",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "201 Created (create)",
                  "fullTitle": "Transactions API Auth 201 Created (create)",
                  "timedOut": null,
                  "duration": 35,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.intercept('POST', '**/api/transactions', {\n  statusCode: 201,\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: {\n    id: 'tx-auth-ok',\n    userId: 'u-1',\n    amount: 42,\n    type: 'transfer',\n    status: 'PENDING'\n  }\n}).as('createTx201');\nconst payload = (0, _dataFactory.makeTransaction)({\n  userId: 'u-1',\n  amount: 42,\n  type: 'transfer'\n});\n(0, _apiFetch.apiFetch)('POST', '/api/transactions', payload, {\n  headers: {\n    authorization: 'Bearer test-token'\n  },\n  // lowercase for consistency\n  expectJson: true\n}).then(({\n  status,\n  body\n}) => {\n  expect(status).to.eq(201);\n  (0, _assertions.expectTransactionShape)(body);\n});\ncy.wait('@createTx201').its('request.body').should('deep.include', payload);",
                  "err": {},
                  "uuid": "38be6f65-5128-480d-ba74-8856fd666517",
                  "parentUUID": "b3bea4ae-0c6b-4195-bb62-a66493486f79",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f718e892-6123-4a83-b39b-aeb1a56d101c",
                "661e7fb9-cd0a-473a-a594-7df8fd940e0f",
                "38be6f65-5128-480d-ba74-8856fd666517"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 79,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/.jsons",
        "overwrite": false,
        "html": false,
        "json": true,
        "saveJson": true
      },
      "version": "6.2.0"
    }
  }
}